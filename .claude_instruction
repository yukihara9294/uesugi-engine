# Claude Code 作業指示

## プロジェクト名: Uesugi Engine

全国の行政・民間施策効果検証プラットフォーム。リアルワールドデータとソーシャルネットワーキングデータを活用し、因果推論AIで過去施策の反実仮想分析と未来予測を行う。

## 重要な原則

1. **情報は削減しない。整理して適切なファイルに配置する。**
2. **絵文字は使わない。**
3. **作業開始時は必ずPROJECT_GUIDE.mdを読む。**
4. **同じ機能の重複実装は避ける。**
5. **「v2」「simple」などのバージョン違いファイルは作らない。**

## MDファイル管理

- PROJECT_GUIDE.md: 作業指示・現状・優先順位
- TECHNICAL_DETAILS.md: 技術仕様・バグ情報
- CLAUDE.md: 作業履歴
- README.md: 外部向け説明
- MD_FILES_MAP.md: ファイル間の関係図

情報を追加する際は、既存ファイルの適切な箇所に追記する。新しいMDファイルは作らない。

## 必須更新ルール

### 作業完了時の更新
1. **PROJECT_GUIDE.md** - 「現在の状況」セクションを必ず更新
2. **CLAUDE.md** - 実施内容を日付付きで記録
3. **TECHNICAL_DETAILS.md** - 新しい技術的発見があれば追加

### 更新時の記載形式
- 日付: YYYY-MM-DD形式で記載
- 変更理由: なぜ変更したかを明記
- 影響範囲: 変更が他の部分に与える影響を記載

## 継続性の確保

次回のClaude Codeインスタンスが正確に状況を把握できるよう、以下を徹底：

1. **現在の状況は常に最新に保つ**
2. **未完了タスクは明確に記載**
3. **既知の問題と回避策を記録**
4. **コアコンセプトの変更は履歴付きで更新**

## GitHubの活用

GitHubリポジトリ自体がプロンプトとして機能することを意識し：

1. コミットメッセージは具体的に
2. issueとPRは詳細に記載
3. ブランチ名は作業内容を反映
4. READMEは常に最新の状態を反映

## 現在の問題と対策

### 問題: MDファイルの肥大化
- 原因: 作業履歴と仕様が混在
- 対策: 役割別にファイルを分離済み

### 注意事項
- 削除前に内容を確認し、必要な情報は移動
- 作業完了後はCLAUDE.mdに記録
- 技術的な発見はTECHNICAL_DETAILS.mdに記載

## 作業開始チェックリスト

□ PROJECT_GUIDE.mdの「現在の状況」を確認
□ CLAUDE.mdで前回の作業内容を確認
□ 未解決の問題をTECHNICAL_DETAILS.mdで確認
□ TodoRead/TodoWriteツールで現在のタスクを確認

## 作業終了チェックリスト

□ PROJECT_GUIDE.mdの「現在の状況」を更新
□ CLAUDE.mdに今回の作業内容を記録
□ 新しい技術的発見をTECHNICAL_DETAILS.mdに追加
□ 次回の作業内容をPROJECT_GUIDE.mdの「次の作業」に明記
□ TodoWriteで完了タスクをcompleted、次回タスクをpendingに設定